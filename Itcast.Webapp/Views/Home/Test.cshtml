@model IEnumerable<Itcast.Model.Test>
@using Itcast.Model;
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Test</title>
    <link type="image/x-icon" href="/favicon.ico" />
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/CanvasContent/css/fontello.css" rel="stylesheet" />
    <link href="~/CanvasContent/css/main.css" rel="stylesheet" />
    <link href="~/CanvasContent/css/style.css" rel="stylesheet" />

    <style>
        #Box tr {
            height: 45px;
            text-align: center;
        }

            #Box tr td {
                line-height: 35px;
            }

        #container {
            position: relative;
            width: 600px;
            height: 500px;
            margin: 0 auto;
            border: 1px solid #ddd;
            background-color: #fff;
        }

            #container a {
                position: absolute;
                left: 0;
                top: 0;
                color: #000;
                text-decoration: none;
                font-weight: bold;
            }
    </style>
    <style>
        a.disabled {
            pointer-events: none;
            filter: alpha(opacity=50); /*IE滤镜，透明度50%*/
            -moz-opacity: 0.5; /*Firefox私有，透明度50%*/
            opacity: 0.5; /*其他，透明度50%*/
        }
    </style>
</head>
<body>
    <div>
        <div class="container" id="Box">
            <table class="table table-bordered table-striped table-hover table-condensed">
                <tr class="">
                    <td>名称</td>
                    <td>题目数量</td>
                    <td>结束时间</td>
                    <td>操作</td>
                </tr>
                @{
                    UserInfo us = Session["Userinfo"] as UserInfo;
                    foreach (var item in Model)
                    {
                        var outs = "";
                        var btncss = "";
                        var text = "";
                        var into = "";
                        if ((DateTime)DateTime.Now < @item.TestEndTime)
                        {
                            outs = "success";
                            btncss = "btn btn-success";
                            text = "进入统测";
                        }
                        else
                        {
                            outs = "danger";
                            btncss = "btn btn-danger";
                            text = "统测结束";
                            //into = "disabled = 'disabled'";
                            into = "disabled";
                        }
                        <tr class="@outs">
                            <td>@item.TestName</td>
                            <td>@item.TestNum</td>
                            <td>@item.TestEndTime</td>
                            <td>
                                <a href="/Exam/Index?id=@item.TestId" target="_parent" class="@into">
                                    <input type="button" class="@btncss" value="@text">
                                </a>
                                <a href="/Exam/Score?id=@item.TestId" target="_blank">
                                    <input type="button" class="btn btn-primary" value="查看成绩">
                                </a>
                                @{
                                    if (us.Grade >= 1)
                                    {
                                        <a href="/Edit/DelTest?id=@item.TestId">
                                            <input type="button" class="btn btn-danger" value="删除" onclick="return confirm('您确认要删除此次统测?')">
                                        </a>
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </table>
            @{
                if (us.Grade >= 1)
                {
                    <div style="margin-left:42%">
                        <button class="btn btn-warning" onclick="location.href='@Url.Action("Test", "Edit")'">
                            <span class="glyphicon glyphicon-plus"></span>&nbsp;添加统测
                        </button>
                    </div>
                }
            }


        </div>
        @*<div style="margin-left:26%">
                <img src="~/Content/images/test.jpg"/>
            </div>*@
            <div class="main grid">
                <div id="container"></div>
            </div>
    </div>
    <script src="~/Content/js/jquery-2.2.3.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script>
        function drawTags() {
            var arr = ['javaScript', 'html', 'css', 'jQuery', 'angularJS', 'mvvm', 'mvc', 'nodeJS', 'html5', 'css3', 'canvas', 'webGL', 'svg', 'backboneJS', 'noSql', 'mongoDB', 'mySQL', 'android', 'ios', 'phoneGap', 'webApp', 'knockoutJS', 'bootStrap', 'chrome', 'firefox'],
                len = arr.length,
                tags = [],
                container = $('#container'),
                R = 200, //半径
                angleX = Math.PI / 500, //绕x轴的角度
                angleY = Math.PI / 500, //绕y轴的角度
                CX = container.width() / 2,
                CY = container.height() / 2,
                EX = container.offset().left + document.body.scrollLeft + document.documentElement.scrollLeft,
                EY = container.offset().top + document.body.scrollTop + document.documentElement.scrollTop;

            function init() {
                for (var i = 0; i < len; i++) {
                    var k = -1 + (2 * (i + 1) - 1) / len;
                    var a = Math.acos(k);
                    var b = a * Math.sqrt(len * Math.PI);
                    // var a = Math.random()*2*Math.PI;
                    // var b = Math.random()*2*Math.PI;
                    var x = R * Math.sin(a) * Math.cos(b);
                    var y = R * Math.sin(a) * Math.sin(b);
                    var z = R * Math.cos(a);
                    var tagEle = $('<a href="#">' + arr[i] + '</a>').css('color', '#' + getRandomColor());
                    container.append(tagEle);
                    var t = new tag(tagEle, x, y, z);
                    tags.push(t);
                    t.move();
                }
            }

            function tag(ele, x, y, z) {
                this.ele = ele;
                this.x = x;
                this.y = y;
                this.z = z;
            }
            tag.prototype.move = function () {
                var scale = 2 * R / (2 * R - this.z);
                var alpha = (this.z + R) / (2 * R);
                this.ele.css({
                    'fontSize': 14 * scale + "px",
                    'opacity': alpha + 0.5,
                    'zIndex': Math.floor(scale * 100),
                    'left': this.x + CX - this.ele.width() / 2 + "px",
                    'top': this.y + CY - this.ele.height() / 2 + "px"
                });
            };
            //获取随机颜色值
            function getRandomColor() {
                var str = Math.ceil(Math.random() * 16777215).toString(16);
                while (str.length < 6) {
                    str = '0' + str;
                }
                return str;
            }

            function rotateX() {
                var cos = Math.cos(angleX);
                var sin = Math.sin(angleX);
                $(tags).each(function () {
                    var y1 = this.y * cos - this.z * sin;
                    var z1 = this.z * cos + this.y * sin;
                    this.y = y1;
                    this.z = z1;
                });
            }

            function rotateY() {
                var cos = Math.cos(angleY);
                var sin = Math.sin(angleY);
                $(tags).each(function () {
                    var x1 = this.x * cos - this.z * sin;
                    var z1 = this.z * cos + this.x * sin;
                    this.x = x1;
                    this.z = z1;
                });
            }

            function action() {
                setInterval(function () {
                    rotateX();
                    rotateY();
                    $(tags).each(function () {
                        this.move();
                    });
                }, 20);
            }

            container.on('mousemove', function (event) {
                var x = event.clientX - EX - CX;
                var y = event.clientY - EY - CY;
                angleY = x * 0.0001;
                angleX = y * 0.0001;
            });
            init();
            action();
        }
        drawTags();
    </script>
</body>
</html>
